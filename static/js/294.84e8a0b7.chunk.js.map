{"version":3,"file":"static/js/294.84e8a0b7.chunk.js","mappings":"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","sources":["redux/selector.js","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/PhoneBook/PhoneBook.module.css?b449","components/PhoneBook/PhoneBook.jsx","Pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = store => store.contacts.items;\n\nexport const selectFilter = store => store.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\n// Получение отфильтрованных контактов\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    // Добавляем проверку на существование и тип контактов\n    if (!Array.isArray(contacts)) {\n      return [];\n    }\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonAdd\":\"ContactForm_buttonAdd__Mr+ls\"};","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { addContacts } from '../../redux/contacts/contact-operations';\nimport { selectContacts } from '../../redux/selector';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport style from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [state, setState] = useState({\n    name: '',\n    number: '',\n  });\n\n  // Генерация уникальных идентификаторов для полей формы\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  // Обработка отправки формы\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    // Проверка наличия контакта в списке\n    const isDuplicate = contacts.some(contact => {\n      return (\n        contact.name.toLowerCase() === state.name.toLowerCase() &&\n        contact.number === state.number\n      );\n    });\n\n    if (isDuplicate) {\n      alert(\n        `This contact ${state.name}: ${state.number} is already in the book`\n      );\n    } else {\n      // Вызов функции addContacts из redux с передачей объекта контакта\n      dispatch(\n        addContacts({ id: nanoid(), name: state.name, number: state.number })\n      );\n      // Сброс состояния формы\n      reset();\n    }\n  };\n\n  // Обработка изменения значений полей формы\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setState(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  // Сброс состояния формы\n  const reset = () => {\n    setState({ number: '', name: '' });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor={nameInputId}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={state.name}\n          onChange={handleChange}\n          placeholder=\"Enter a contact name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          autoComplete=\"on\"\n          required\n        />\n      </label>\n\n      <label htmlFor={numberInputId}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={state.number}\n          onChange={handleChange}\n          placeholder=\"Enter a contact number\"\n          pattern=\"[0-9\\+\\-]*\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          autoComplete=\"on\"\n          required\n        />\n      </label>\n\n      <button className={style.buttonAdd} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts } from '../../redux/selector';\nimport style from './ContactList.module.css';\nimport { deleteContacts } from '../../redux/contacts/contact-operations';\n\n// Компонент списка контактов\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  // Удаление контакта из списка\n  const onDeleteContact = id => {\n    const action = deleteContacts(id);\n    dispatch(action);\n  };\n\n  return (\n    <ul className={style.list}>\n      {visibleContacts.map(contact => (\n        <li key={contact.id}>\n          {contact.name + ' : ' + contact.phone}\n          <button\n            type=\"button\"\n            name=\"delete\"\n            onClick={() => onDeleteContact(contact.id)}\n          >\n            delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from '../../redux/selector';\nimport { setFilter } from '../../redux/filter/filter-slice';\nimport style from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  // Изменение значения фильтра\n  const changeFilter = ({ target }) => dispatch(setFilter(target.value));\n\n  return (\n    <div className={style.filter}>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          value={filter}\n          onChange={changeFilter}\n          placeholder=\"Search\"\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PhoneBook_container__qH1yN\",\"wrapper\":\"PhoneBook_wrapper__HFzQj\"};","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectError,\n  selectIsLoading,\n  selectContacts,\n} from '../../redux/selector';\nimport { fetchContacts } from '../../redux/contacts/contact-operations';\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\nimport style from './PhoneBook.module.css';\nimport Loader from 'components/Loader/Loader';\n\nconst PhoneBook = () => {\n  const items = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div className={style.container}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      {items && items.length > 0 ? (\n        <Filter />\n      ) : (\n        <div className=\"style.wrapper\">\n          Your phonebook is empty. Add first contact!\n        </div>\n      )}\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n      {items && items.length > 0 && <ContactList />}\n    </div>\n  );\n};\n\nexport default PhoneBook;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../redux/contacts/contact-operations';\nimport { selectIsLoading } from '../redux/selector';\nimport Loader from '../components/Loader/Loader';\nimport PhoneBook from 'components/PhoneBook/PhoneBook';\n\n// Компонент Tasks відповідає за відображення списку контактів та їх форми\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts()); // Виконуємо запит для отримання контактів з сервера\n  }, [dispatch]);\n\n  return (\n    <>\n      <title>Your contacts</title>\n      <div>{isLoading && <Loader />}</div> <PhoneBook />\n    </>\n  );\n}\n"],"names":["selectContacts","store","contacts","items","selectFilter","filter","selectIsLoading","state","isLoading","selectError","error","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","Array","isArray","contact","name","includes","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","_useState","useState","number","_useState2","_slicedToArray","setState","nameInputId","numberInputId","useSelector","dispatch","useDispatch","handleChange","event","_event$target","target","value","prevState","_objectSpread","_defineProperty","reset","_jsxs","onSubmit","preventDefault","some","alert","concat","addContacts","children","htmlFor","_jsx","type","onChange","placeholder","pattern","title","autoComplete","required","className","style","visibleContacts","map","phone","onClick","action","deleteContacts","onDeleteContact","_ref","setFilter","useEffect","fetchContacts","ContactForm","Filter","Loader","ContactList","Tasks","_Fragment","PhoneBook"],"sourceRoot":""}